import sbtbuildinfo.{ BuildInfoOption, BuildInfoRenderer, BuildInfoResult, BuildInfoType, TypeExpression }

case class JavaBuildInfoRenderer(options: Seq[BuildInfoOption], pkg: String, obj: String) extends BuildInfoRenderer {

  override def fileType: BuildInfoType = BuildInfoType.Source

  override def `extension`: String = "java"

  override def renderKeys(results: Seq[BuildInfoResult]): Seq[String] =
    header ++ results.flatMap(line) ++ footer

  def header = List(
    s"package $pkg;",
    "",
    s"/** This object was generated by sbt-buildinfo. */",
    withPkgPriv(s"class $obj {")
  )

  def footer = List("}")

  def withPkgPriv(str: String): String =
    if (isPkgPriv)
      str
    else s"public $str"

  private def line(result: BuildInfoResult): Seq[String] = {
    import result._
    val typeDecl = getType(result.typeExpr)

    List(
      s"  /** The value is ${quote(value)}. */",
      s"  public static final $typeDecl $identifier = ${quote(value)};"
    )
  }

  private def getType(typeExpr: TypeExpression): String = {
    typeExpr match {
      case TypeExpression("Int", Nil)              => "int"
      case TypeExpression("Long", Nil)             => "long"
      case TypeExpression("Double", Nil)           => "double"
      case TypeExpression("Boolean", Nil)          => "boolean"
      case TypeExpression("java.lang.String", Nil) => "String"
      case _                                       => "Object"
    }
  }

  private def quote(v: Any): String = v match {
    case x @ (_: Int | _: Double | _: Boolean) => x.toString
    case x: Long                               => x.toString + "L"
    case s                                     => "\"%s\"" format encodeStringLiteral(s.toString)

  }

  protected def encodeStringLiteral(str: String): String =
    str
      .replace("\\", "\\\\")
      .replace("\n", "\\n")
      .replace("\b", "\\b")
      .replace("\r", "\\r")
      .replace("\t", "\\t")
      .replace("\'", "\\'")
      .replace("\f", "\\f")
      .replace("\"", "\\\"")
}
